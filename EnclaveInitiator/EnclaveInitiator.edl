enclave {
    include "sgx_eid.h"
    include "datatypes.h"
    include "dh_session_protocol.h"
     
    trusted{
            public uint32_t test_create_session();
            //public uint32_t test_message_exchange();
            public uint32_t modify_test_message_exchange([user_check] worker_input_t *secret_data,[user_check] worker_output_t * secret_response);
            public uint32_t test_close_session();
            public void initialize_worker_input([user_check]worker_input_t *worker_input, uint32_t rows, uint32_t cols, uint32_t num_workers, uint32_t num_clusters);
    };

    untrusted{
	    uint32_t session_request_ocall([out] sgx_dh_msg1_t *dh_msg1,[out] uint32_t *session_id);
            uint32_t exchange_report_ocall([in] sgx_dh_msg2_t *dh_msg2, [out] sgx_dh_msg3_t *dh_msg3, uint32_t session_id);
            uint32_t send_request_ocall(uint32_t session_id, [in, size = req_message_size] secure_message_t* req_message, size_t req_message_size, size_t max_payload_size, [out, size=resp_message_size] secure_message_t* resp_message, size_t resp_message_size);
            uint32_t end_session_ocall(uint32_t session_id);
        uint32_t print_ocall([user_check]uint32_t * digit);
        uint32_t print_float_ocall([user_check]float * digit);
            uint32_t get_output_ocall([in,out]worker_output_t * inbound, [user_check] worker_output_t * outbound);
    };

};
